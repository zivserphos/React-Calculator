{"version":3,"sources":["components/ResultArea.js","components/Button.js","components/CalcArea.js","modules/MathFunctions.js","components/main/Main.js","App.js","index.js"],"names":["ResultArea","exp","addSign","id","className","onKeyPress","key","window","event","isNaN","console","log","value","Button","sign","onClick","signs","signToId","CalcArea","map","numbersToWords","toWords","calculateExp","isMinus","charAt","slice","numbers","split","oper","replace","length","num1","num2","Number","toString","calculateResult","regex","match","Calculator","useState","setExp","twoSigns","setTwoSigns","addSignToExp","nums","lastNum","startsWith","undefined","concat","CalculateResult","lastChar","includes","str","lastSign","newExp","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4742ab57.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport function ResultArea({ exp, addSign }) {\r\n  return (\r\n    <input\r\n      id=\"display\"\r\n      className=\"resultArea\"\r\n      onKeyPress={() => {\r\n        const key = window.event.key;\r\n        const isValid = key === \"+\" || key === \"-\" || !isNaN(key);\r\n        isValid ? addSign(window.event.key) : console.log(\"false\");\r\n      }}\r\n      value={exp}\r\n    ></input>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport function Button({ sign, id, addSign }) {\r\n  return (\r\n    <button\r\n      id={sign === \"=\" ? \"equals\" : id}\r\n      className=\"button\"\r\n      onClick={() => addSign(sign)}\r\n    >\r\n      {sign}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button } from \"./Button\";\r\nimport numbersToWords from \"number-to-words\";\r\n\r\nconst signs = [\r\n  \"9\",\r\n  \"8\",\r\n  \"7\",\r\n  \"DEL\",\r\n  \"AC\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"X\",\r\n  \"/\",\r\n  \"1\",\r\n  \"2\",\r\n  \"3\",\r\n  \"+\",\r\n  \"-\",\r\n  \"0\",\r\n  \".\",\r\n  \"=\",\r\n];\r\n\r\nfunction signToId(sign) {\r\n  if (sign === \"X\") return \"multiply\";\r\n  if (sign === \"+\") return \"add\";\r\n  if (sign === \"-\") return \"subtract\";\r\n  if (sign === \"/\") return \"divide\";\r\n  if (sign === \".\") return \"decimal\";\r\n  if (sign === \"AC\") return \"clear\";\r\n  if (sign === \"DEL\") return \"del\";\r\n  if (sign === \"=\") return \"equals\";\r\n}\r\n\r\nexport function CalcArea({ addSign }) {\r\n  return (\r\n    <div className=\"calc-area\">\r\n      {signs.map((sign) => {\r\n        return (\r\n          <Button\r\n            key={sign}\r\n            id={!isNaN(sign) ? numbersToWords.toWords(sign) : signToId(sign)}\r\n            addSign={addSign}\r\n            sign={sign}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","function calculateResult(exp) {\r\n  let regex = /-?[0-9]*[.]?[0-9]+[X/][-]?[0-9]*[.]?[0-9]+/;\r\n  while (exp.match(regex)) {\r\n    exp = exp.replace(regex, calculateExp(exp.match(regex)[0]));\r\n  }\r\n  regex = /-?[0-9]*[.]?[0-9]+[+-][0-9]*[.]?[0-9]+/;\r\n  while (exp.match(regex)) {\r\n    exp = exp.replace(regex, calculateExp(exp.match(regex)[0]));\r\n  }\r\n  return exp;\r\n}\r\n\r\nfunction calculateExp(exp) {\r\n  const isMinus = exp.charAt(0) === \"-\" ? true : false;\r\n  if (isMinus) exp = exp.slice(1);\r\n  const numbers = exp.split(/[X/+-][-]?/g);\r\n  console.log(numbers);\r\n  let oper = exp.replace(/[0-9]*[.]?[0-9]/g, \"\");\r\n  if (oper.length > 1) {\r\n    oper = oper.slice(0, 1);\r\n    numbers[1] *= -1;\r\n  }\r\n  let [num1, num2] = [numbers[0], numbers[1]];\r\n  if (isMinus) num1 = num1 * -1;\r\n  if (oper === \"X\") {\r\n    return (Number(num1) * Number(num2)).toString();\r\n  }\r\n  if (oper === \"/\") {\r\n    return (Number(num1) / Number(num2)).toString();\r\n  }\r\n  if (oper === \"+\") {\r\n    return (Number(num1) + Number(num2)).toString();\r\n  }\r\n  if (oper === \"-\") {\r\n    return (Number(num1) - Number(num2)).toString();\r\n  }\r\n}\r\n\r\nexport default calculateResult;\r\n","import React, { useState } from \"react\";\r\nimport { ResultArea } from \"../ResultArea\";\r\nimport { CalcArea } from \"../CalcArea\";\r\nimport CalculateResult from \"../../modules/MathFunctions\";\r\n\r\nexport function Calculator() {\r\n  const [exp, setExp] = useState(\"\");\r\n  const [twoSigns, setTwoSigns] = useState(false);\r\n\r\n  const addSignToExp = (sign) => {\r\n    if (exp === \"0\") {\r\n      if (isNaN(sign)) return;\r\n      return setExp(sign);\r\n    }\r\n    if (sign === \"0\") {\r\n      const nums = exp.split(/[X/+-]/g);\r\n      const lastNum = nums[nums.length - 1];\r\n      setTwoSigns(false);\r\n      if (lastNum.startsWith(\"0\") && lastNum[1] === undefined) return;\r\n      return setExp(exp.concat(sign));\r\n    }\r\n\r\n    if (sign === \"=\") {\r\n      setTwoSigns(false);\r\n      return setExp(CalculateResult(exp));\r\n    }\r\n    if (sign === \"AC\") {\r\n      setTwoSigns(false);\r\n      return setExp(\"0\");\r\n    }\r\n    if (sign === \"DEL\") {\r\n      setTwoSigns(false);\r\n      return setExp(exp.slice(0, exp.length - 1));\r\n    }\r\n    if (sign === \".\") {\r\n      const nums = exp.split(/[X/+-]/g);\r\n      const lastNum = nums[nums.length - 1];\r\n      const lastChar = exp[exp.length - 1];\r\n      if (!lastNum.includes(\".\") && !isNaN(lastChar))\r\n        return setExp(exp.concat(sign));\r\n      setTwoSigns(false);\r\n      return;\r\n    }\r\n    if (isNaN(sign)) {\r\n      const str = exp;\r\n      const lastSign = str.charAt(str.length - 1);\r\n      if (isNaN(lastSign) && sign !== \".\") {\r\n        if ((lastSign === \"X\" || lastSign === \"/\") && sign === \"-\") {\r\n          setTwoSigns(true);\r\n          return setExp(exp.slice().concat(sign));\r\n        }\r\n        if (!twoSigns) return setExp(exp.slice(0, exp.length - 1).concat(sign));\r\n        return;\r\n      }\r\n    }\r\n    const newExp = exp.concat(sign);\r\n    setExp(newExp);\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <ResultArea addSign={addSignToExp} exp={exp} />\r\n      <CalcArea addSign={addSignToExp} />\r\n    </div>\r\n  );\r\n}\r\n","import { Calculator } from \"./components/main/Main\";\r\nimport \"./components/main/common.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}